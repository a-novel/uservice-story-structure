// Code generated by mockery v2.46.0. DO NOT EDIT.

package servicesmocks

import (
	context "context"

	services "github.com/a-novel/uservice-story-structure/pkg/services"
	mock "github.com/stretchr/testify/mock"
)

// MockCreatePlotPoint is an autogenerated mock type for the CreatePlotPoint type
type MockCreatePlotPoint struct {
	mock.Mock
}

type MockCreatePlotPoint_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCreatePlotPoint) EXPECT() *MockCreatePlotPoint_Expecter {
	return &MockCreatePlotPoint_Expecter{mock: &_m.Mock}
}

// Exec provides a mock function with given fields: ctx, data
func (_m *MockCreatePlotPoint) Exec(ctx context.Context, data *services.CreatePlotPointRequest) (*services.CreatePlotPointResponse, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for Exec")
	}

	var r0 *services.CreatePlotPointResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *services.CreatePlotPointRequest) (*services.CreatePlotPointResponse, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *services.CreatePlotPointRequest) *services.CreatePlotPointResponse); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*services.CreatePlotPointResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *services.CreatePlotPointRequest) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCreatePlotPoint_Exec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exec'
type MockCreatePlotPoint_Exec_Call struct {
	*mock.Call
}

// Exec is a helper method to define mock.On call
//   - ctx context.Context
//   - data *services.CreatePlotPointRequest
func (_e *MockCreatePlotPoint_Expecter) Exec(ctx interface{}, data interface{}) *MockCreatePlotPoint_Exec_Call {
	return &MockCreatePlotPoint_Exec_Call{Call: _e.mock.On("Exec", ctx, data)}
}

func (_c *MockCreatePlotPoint_Exec_Call) Run(run func(ctx context.Context, data *services.CreatePlotPointRequest)) *MockCreatePlotPoint_Exec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*services.CreatePlotPointRequest))
	})
	return _c
}

func (_c *MockCreatePlotPoint_Exec_Call) Return(_a0 *services.CreatePlotPointResponse, _a1 error) *MockCreatePlotPoint_Exec_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCreatePlotPoint_Exec_Call) RunAndReturn(run func(context.Context, *services.CreatePlotPointRequest) (*services.CreatePlotPointResponse, error)) *MockCreatePlotPoint_Exec_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCreatePlotPoint creates a new instance of MockCreatePlotPoint. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCreatePlotPoint(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCreatePlotPoint {
	mock := &MockCreatePlotPoint{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
